generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  googleId       String?   @unique
  email          String    @unique
  username       String    @unique
  password       String
  bio            String?
  avatar         String?
  token          String?
  tokenExpiresAt DateTime?
  emailVerified  Boolean   @default(false)
  role           Role      @default(USER)
  joinDate       DateTime  @default(now())
  reputation     Int       @default(0)

  posts      Post[]
  comment    Comment[]
  votes      Vote[]
  reports    Report[]
  savedPosts SavedPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id           String  @id @default(cuid())
  title        String
  content      String
  excerpt      String?
  authorId     String
  isSticky     Boolean @default(false)
  isLocked     Boolean @default(false)
  isBookmarked Boolean @default(false)

  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  tags      PostTag[]
  votes     Vote[]
  reports   Report[]
  savedBy   SavedPost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("posts")
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  authorId String
  postId   String
  parentId String?

  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
  votes   Vote[]
  reports Report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  type      VoteType

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("votes")
}

model Report {
  id         String  @id @default(cuid())
  reason     String
  details    String
  status     String
  reporterId String
  postId     String?
  commentId  String?

  reporter User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reports")
}

model SavedPost {
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
  @@map("saved_posts")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}
